# Which four options describe the correct default values for array elements of the types indicated?

int -> 0
String -> "null"
Dog -> null
char -> '\u0000'
float -> 0.0f
boolean -> true
A.	1, 2, 3, 4
B.	1, 3, 4, 5
C.	2, 4, 5, 6
D.	3, 4, 5, 6
Answer: Option B
Explanation:

(1), (3), (4), (5) are the correct statements.

(2) is wrong because the default value for a String (and any other object reference) is null, with no quotes.

(6) is wrong because the default value for boolean elements is false.

# Which one of these lists contains only Java programming language keywords?
goto, instanceof, native, finally, default, throws	
# Which will legally declare, construct, and initialize an array?

A.	int [] myList = {"1", "2", "3"};
B.	int [] myList = (5, 8, 2);
C.	int myList [] [] = {4,9,7,0};
 ans D.	int myList [] = {4, 3, 7};	
 # Which is a reserved word in the Java programming language
 native	
 
 # Which is a valid keyword in java?
ans A.	interface	@
B.	string
C.	Float
D.	unsigned

# Which three are legal array declarations?
int [] myScores [];
char [] myChars;
int [6] myScores;
Dog myDogs [];
Dog myDogs [7];
A.	1, 2, 4
B.	2, 4, 5
C.	2, 3, 4
D.	All are correct.
Answer: Option A

# public interface Foo 
{ 
    int k = 4; /* Line 3 */
}
Which three piece of codes are equivalent to line 3?
final int k = 4;
public int k = 4;
static int k = 4;
abstract int k = 4;
volatile int k = 4;
protected int k = 4;
A.	1, 2 and 3
B.	2, 3 and 4
C.	3, 4 and 5
D.	4, 5 and 6
Answer: Option A

# Which one of the following will declare an array and initialize it with five numbers?

A.	Array a = new Array(5);
B.	int [] a = {23,22,21,20,19};
C.	int a [] = new int[5];
D.	int [5] array;
Answer: Option B

# Which three are valid declarations of a char?

char c1 = 064770;
char c2 = 'face';
char c3 = 0xbeef;
char c4 = \u0022;
char c5 = '\iface';
char c6 = '\uface';
A.	1, 2, 4
B.	1, 3, 6
C.	3, 5
D.	5 only
Answer: Option B

Explanation:

(1), (3), and (6) are correct. char c1 = 064770; is an octal representation of the integer value 27128, 
which is legal because it fits into an unsigned 16-bit integer. char c3 = 0xbeef; is a hexadecimal representation 
of the integer value 48879, 
which fits into an unsigned 16-bit integer. char c6 = '\uface'; is a Unicode representation of a character.

# Which is the valid declarations within an interface definition?

A.	public double methoda();
B.	public final double methoda();
C.	static void methoda(double d1);
D.	protected void methoda(double d1);
Answer: Option A

# What is the numerical range of a char?

A.	-128 to 127
B.	-(215) to (215) - 1
C.	0 to 32767
D.	0 to 65535	@
Answer: Option D
Explanation:
A char is really a 16-bit integer behind the scenes, so it supports 216 (from 0 to 65535) values.

# Which is a valid declarations of a String?

 ans A.	String s1 = null;
B.	String s2 = 'null';
C.	String s3 = (String) 'abc';
D.	String s4 = (String) '\ufeed';

# 	Which three are valid declarations of a float?

float f1 = -343;
float f2 = 3.14;
float f3 = 0x12345;
float f4 = 42e7;
float f5 = 2001.0D;
float f6 = 2.81F;
A.	1, 2, 4
B.	2, 3, 5
C.	1, 3, 6
D.	2, 4, 6
Explanation:

(1) and (3) are integer literals (32 bits), and integers can be legally assigned to floats (also 32 bits).
(6) is correct because (F) is appended to the literal, declaring it as a float rather than a double 
(the default for floating point literals).

(2), (4),and (5) are all doubles.

# Which one is a valid declaration of a boolean?

A.	boolean b1 = 0;
B.	boolean b2 = 'false';
C.	boolean b3 = false;
D.	boolean b4 = Boolean.false();
E.	boolean b5 = no;
Answer: Option C
Explanation:
A boolean can only be assigned the literal true or false.

#  i did not understand What will be the output of the program?

public class CommandArgsThree 
{
    public static void main(String [] args) 
    {
        String [][] argCopy = new String[2][2];
        int x;
        argCopy[0] = args;
        x = argCopy[0].length;
        for (int y = 0; y < x; y++) 
        {
            System.out.print(" " + argCopy[0][y]);
        }
    }
}
and the command-line invocation is

> java CommandArgsThree 1 2 3

A.	0 0
B.	1 2
C.	0 0 0
D.	1 2 3
Answer: Option D

Explanation:
In argCopy[0] = args;, the reference variable argCopy[0],
which was referring to an array with two elements, is reassigned to an array (args) with three elements.

# What will be the output of the program?

public class CommandArgs 
{
    public static void main(String [] args) 
    {
        String s1 = args[1];
        String s2 = args[2];
        String s3 = args[3];
        String s4 = args[4];
        System.out.print(" args[2] = " + s2);
    }
}
and the command-line invocation is

> java CommandArgs 1 2 3 4

A.	args[2] = 2
B.	args[2] = 3
C.	args[2] = null
D.	An exception is thrown at runtime.
Answer: Option D

Explanation:

An exception is thrown because in the code String s4 = args[4];, 
the array index (the fifth element) is out of bounds. The exception thrown is the cleverly 
named ArrayIndexOutOfBoundsException.

# public class F0091 
{    
    public void main( String[] args ) 
    {  
        System.out.println( "Hello" + args[0] ); 
    } 
}
What will be the output of the program, if this code is executed with the command line:

> java F0091 world

A.	Hello
B.	Hello Foo91
C.	Hello world
D.	The code does not run.
Answer: Option D

Explanation:

Option D is correct. A runtime error will occur owning to the main method of the code fragment not being declared static:
# public class F0091 
{    
    public void main( String[] args ) 
    {  
        System.out.println( "Hello" + args[0] ); 
    } 
}
What will be the output of the program, if this code is executed with the command line:

> java F0091 world

A.	Hello
B.	Hello Foo91
C.	Hello world
D.	The code does not run.
Answer: Option D

Explanation:

Option D is correct. A runtime error will occur owning to the main method of the code fragment not being declared static:

# What will be the output of the program?
public class TestDogs 
{
    public static void main(String [] args) 
    {
        Dog [][] theDogs = new Dog[3][];
        System.out.println(theDogs[2][0].toString());
    }
}
class Dog { }
A.	null
B.	theDogs
C.	Compilation fails
 ans D.	An exception is thrown at runtime	@
The second dimension of the array referenced by theDogs has not been initialized. Attempting to access an 
uninitialized object element 
(System.out.println(theDogs[2][0].toString());) raises a NullPointerException.

# What will be the output of the program ?

public class Test 
{
    public static void main(String [] args) 
    {
        signed int x = 10;
        for (int y=0; y<5; y++, x--)
            System.out.print(x + ", ");
    }
}
A.	10, 9, 8, 7, 6,
B.	9, 8, 7, 6, 5,
C.	Compilation fails.
D.	An exception is thrown at runtime.
Answer: Option C

Explanation:
The word "signed" is not a valid modifier keyword in the Java language. 
All number primitives in Java are signed. Hence the Compilation will fails.
# What will be the output of the program?

public class X 
{
    public static void main(String [] args) 
    {
        String names [] = new String[5];
        for (int x=0; x < args.length; x++)
            names[x] = args[x];
        System.out.println(names[2]);
    }
}
and the command line invocation is

> java X a b

A.	names
ans -B.	null	@
C.	Compilation fails
D.	An exception is thrown at runtime
Answer: Option B

Explanation:
The names array is initialized with five null elements. Then elements 0 and 1 are assigned the String values 
"a" and "b" respectively (the command-line arguments passed to main).
Elements of names array 2, 3, and 4 remain unassigned, so they have a value of null.

# In the given program, how many lines of output will be produced?

public class Test 
{
    public static void main(String [] args) 
    {
    int [] [] [] x = new int [3] [] [];
    int i, j;
    x[0] = new int[4][];
    x[1] = new int[2][];
    x[2] = new int[5][];
    for (i = 0; i < x.length; i++)
    {
        for (j = 0; j < x[i].length; j++) 
        {
            x[i][j] = new int [i + j + 1];
            System.out.println("size = " + x[i][j].length);
        }
    }
    }
}
A.	7
B.	9
C.	11
D.	13
E.	Compilation fails
Answer: Option C

Explanation:

The loops use the array sizes (length).

It produces 11 lines of output as given below.

D:\Java>javac Test.java

D:\Java>java Test
size = 1
size = 2
size = 3
size = 4
size = 2
size = 3
size = 3
size = 4
size = 5
size = 6
size = 7
Therefore, 11 is the answer.

# What will be the output of the program?

public class CommandArgsTwo 
{
    public static void main(String [] argh) 
    {
        int x;
        x = argh.length;
        for (int y = 1; y <= x; y++) 
        {
            System.out.print(" " + argh[y]);
        }
    }
}
and the command-line invocation is

> java CommandArgsTwo 1 2 3

A.	0 1 2
B.	1 2 3
C.	0 0 0
D.	An exception is thrown at runtime
Answer: Option D

Explanation:
An exception is thrown because at some point in (System.out.print(" " + argh[y]);), the value of x will be equal to y, 
resulting in an attempt to access an index out of bounds for the array. Remember that you can access only as far as length - 1,
so loop logical tests should use x < someArray.length as opposed to x < = someArray.length.








 
